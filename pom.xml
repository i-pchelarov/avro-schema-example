<?xml version="1.0"?>

<!--
  ~ Avro schema evolution example.
  ~ Copyright (C) 2022 Niels Basjes
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <artifactId>webdata-schema</artifactId>
    <packaging>jar</packaging>
    <groupId>nl.basjes.avro-example</groupId>
    <version>1.0.10-SNAPSHOT</version>

    <name>WebData schema</name>

    <properties>
        <target.java.version>11</target.java.version>
        <target.java.release>11</target.java.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.build.outputEncoding>UTF-8</project.build.outputEncoding>
        <maven.compiler.source>${target.java.version}</maven.compiler.source>
        <maven.compiler.target>${target.java.version}</maven.compiler.target>
        <maven.compiler.release>${target.java.release}</maven.compiler.release>
        <!-- In order for everything to work correctly we need at least this version of maven. -->
        <maven.minimal.version>3.5.2</maven.minimal.version>

        <schema.name>Measurement</schema.name>
        <schema.namespace>nl.basjes.avroexample.webdata</schema.namespace>
        <schema.registry>http://localhost:8000</schema.registry>

        <!-- FIXME: THIS IS ONLY AN EXAMPLE PROJECT WHERE WE DO NOT ACTUALLY DEPLOY A JAR TO MAVEN CENTRAL        -->
        <!--        SO WE ARE SKIPPING THE DEPLOYMENT STEP WHICH IS A REALLY WEIRD THING ... EXCEPT WHEN IT IS A DEMO -->
        <maven.deploy.skip>true</maven.deploy.skip>

        <avro.version>1.12.0</avro.version>

        <!-- ============================================== -->

        <maven-checkstyle-plugin.version>3.1.2</maven-checkstyle-plugin.version>
        <checkstyle.version>10.3</checkstyle.version>

        <commons-collections4.version>4.4</commons-collections4.version>

        <junit5.version>5.8.2</junit5.version>
        <hamcrest-core.version>2.2</hamcrest-core.version>

        <!-- ============================================== -->

        <exec-maven-plugin.version>3.0.0</exec-maven-plugin.version>

        <maven-compiler-plugin.version>3.10.1</maven-compiler-plugin.version>
        <maven-deploy-plugin.version>3.0.0-M2</maven-deploy-plugin.version>
        <maven-enforcer-plugin.version>3.1.0</maven-enforcer-plugin.version>
        <maven-release-plugin.version>3.0.0-M6</maven-release-plugin.version>
        <maven-source-plugin.version>3.2.1</maven-source-plugin.version>
        <maven-surefire-plugin.version>3.0.0-M7</maven-surefire-plugin.version>

        <version.copyright>Copyright (C) 2022 Niels Basjes</version.copyright>
        <version.license>License Apache 2.0</version.license>
        <version.url>${project.url}</version.url>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit5.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>

        <dependency>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro</artifactId>
            <version>${avro.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.maven.release</groupId>
            <artifactId>maven-release-semver-policy</artifactId>
            <version>3.1.1</version>
        </dependency>

        <!-- Test dependencies -->

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.hamcrest</groupId>
                    <artifactId>hamcrest-core</artifactId>
                </exclusion>
            </exclusions>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <version>${hamcrest-core.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>1.7.36</version>
        </dependency>

    </dependencies>

    <profiles>

        <profile>
            <id>skipQuality</id>
            <properties>
                <skipTests>true</skipTests>
                <checkstyle.skip>true</checkstyle.skip>
            </properties>
        </profile>

        <profile>
            <id>prepare</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.amashchenko.maven.plugin</groupId>
                        <artifactId>gitflow-maven-plugin</artifactId>
<!--                        <version>1.21.0</version>-->
<!--                        <configuration>-->
<!--                            <pushRemote>true</pushRemote>-->
<!--                            <commitDevelopmentVersionAtStart>false</commitDevelopmentVersionAtStart>-->
<!--                            <preReleaseGoals>verify</preReleaseGoals>-->
<!--                            <preHotfixGoals>verify</preHotfixGoals>-->
<!--                            <gitFlowConfig>-->
<!--                                <productionBranch>prod</productionBranch>-->
<!--                                <developmentBranch>dev</developmentBranch>-->
<!--                            </gitFlowConfig>-->
<!--                        </configuration>-->
                        <executions>
                            <execution>
                                <id>Prepare release branch</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>release-start</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>release</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.amashchenko.maven.plugin</groupId>
                        <artifactId>gitflow-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>Prepare release branch</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>release-finish</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>schema</id>

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>${exec-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>Copy the schema to the code base</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>cp</executable>
                                    <arguments>
                                        <argument>${project.basedir}/target/CurrentSchema.csv</argument>
                                        <argument>${project.basedir}/src/main/resources/schema-history/${project.version}.csv</argument>
                                    </arguments>
                                </configuration>
                            </execution>

                            <execution>
                                <id>Push the newly released schema to the schema registry</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <!-- FIXME: THIS IS ONLY AN EXAMPLE PROJECT WHERE WE DO NOT ACTUALLY DEPLOY A SCHEMA TO A REGISTRY -->
                                    <!--        THIS IS JUST A DUMMY IMPLEMENTATION WHICH YOU SHOULD REPLACE WITH WHATEVER YOU HAVE    -->
                                    <executable>publish-schema.sh</executable>
                                    <environmentVariables>
                                        <REGISTRY_URL>${schema.registry}</REGISTRY_URL>
                                        <FILE>${project.basedir}/src/main/resources/schema-history/${project.version}.csv</FILE>
                                        <SCHEMA>${schema.name}</SCHEMA>
                                        <VERSION>${project.version}</VERSION>
                                    </environmentVariables>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>publish</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>${exec-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>Generate the full schema history file</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument>
                                            rm ${project.basedir}/src/main/resources/schema-history/*-SNAPSHOT.csv
                                            rm ${project.basedir}/src/main/resources/schema-history/SchemaHistory.csv;
                                            cat ${project.basedir}/src/main/resources/schema-history/*.csv &gt; ${project.basedir}/src/main/resources/schema-history/SchemaHistory.csv</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>Commit the schema with the code base</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>git</executable>
                                    <arguments>
                                        <argument>add</argument>
                                        <argument>${project.basedir}/src/main/resources/schema-history/${project.version}.csv</argument>
                                        <argument>${project.basedir}/src/main/resources/schema-history/SchemaHistory.csv</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>

    </profiles>

    <build>
        <defaultGoal>clean package</defaultGoal>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>com.amashchenko.maven.plugin</groupId>
                    <artifactId>gitflow-maven-plugin</artifactId>
                    <version>1.21.0</version>
                    <configuration>
                        <pushRemote>true</pushRemote>
                        <commitDevelopmentVersionAtStart>false</commitDevelopmentVersionAtStart>
                        <preReleaseGoals>verify</preReleaseGoals>
                        <preHotfixGoals>verify</preHotfixGoals>
                        <gitFlowConfig>
                            <productionBranch>prod</productionBranch>
                            <developmentBranch>dev</developmentBranch>
                        </gitFlowConfig>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <resources>
            <resource>
                <directory>${project.basedir}/src/main/avro</directory>
                <targetPath>${project.build.directory}/avro</targetPath>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <targetPath>${project.build.outputDirectory}</targetPath>
                <filtering>false</filtering>
            </resource>
        </resources>

        <plugins>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>parse-project-version</id>
                        <goals>
                            <goal>parse-version</goal>
                        </goals>
                        <configuration>
                            <propertyPrefix>projectVersion</propertyPrefix>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <!-- Defined explicitly to ensure it will be executed before avro-maven-plugin -->
                        <id>copy-resources-and-avro-schema</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>resources</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.avro</groupId>
                <artifactId>avro-maven-plugin</artifactId>
                <version>${avro.version}</version>
                <executions>
                    <execution>
                        <id>schemas</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>schema</goal>
                            <goal>protocol</goal>
                            <goal>idl-protocol</goal>
                        </goals>
                        <configuration>
                            <stringType>String</stringType>
                            <sourceDirectory>${project.build.directory}/avro</sourceDirectory>
                            <fieldVisibility>private</fieldVisibility>
                        </configuration>
                    </execution>
<!--                    <execution>-->
<!--                        <id>test-schemas</id>-->
<!--                        <phase>process-test-resources</phase>-->
<!--                        <goals>-->
<!--                            <goal>schema</goal>-->
<!--                            <goal>protocol</goal>-->
<!--                            <goal>idl-protocol</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            <stringType>String</stringType>-->
<!--                            <sourceDirectory>src/test/avro</sourceDirectory>-->
<!--                            <fieldVisibility>private</fieldVisibility>-->
<!--                        </configuration>-->
<!--                    </execution>-->
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>${maven-source-plugin.version}</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>${maven-enforcer-plugin.version}</version>
                <executions>
                    <execution>
                        <id>Check build environment requirements</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireJavaVersion>
                                    <version>[11,)</version>
                                    <message>This need Java 11.</message>
                                </requireJavaVersion>
                                <requireMavenVersion>
                                    <version>[${maven.minimal.version},)</version>
                                    <message>You must use Maven version ${maven.minimal.version} or newer to build this
                                        project.
                                    </message>
                                    <!-- Reasons for this need:                            -->
                                    <!-- https://issues.apache.org/jira/browse/MDEPLOY-221 -->
                                    <!-- https://issues.apache.org/jira/browse/MNG-6581    -->
                                </requireMavenVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <release>${target.java.release}</release>
                    <compilerArgs>
                        <!-- Enable all warnings and fail on any warning.-->
                        <arg>-Xlint:all</arg>
                        <arg>-Werror</arg>
                    </compilerArgs>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <failIfNoTests>true</failIfNoTests>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>${maven-deploy-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>${maven-release-plugin.version}</version>
                <configuration>
                    <autoVersionSubmodules>true</autoVersionSubmodules>

                    <scmCommentPrefix>Release:</scmCommentPrefix>
                    <scmReleaseCommitComment>Release: Version @{releaseLabel}</scmReleaseCommitComment>
                    <scmDevelopmentCommitComment>Release: Start development of next version
                    </scmDevelopmentCommitComment>
                    <scmRollbackCommitComment>Release: Rollback the release of @{releaseLabel}
                    </scmRollbackCommitComment>

                    <tagNameFormat>v@{project.version}</tagNameFormat>

                    <preparationGoals>clean verify</preparationGoals>
                    <releaseProfiles>schema,publish</releaseProfiles>
                    <pushChanges>false</pushChanges>
                    <remoteTagging>false</remoteTagging>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>com.puppycrawl.tools</groupId>
                        <artifactId>checkstyle</artifactId>
                        <version>${checkstyle.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <consoleOutput>true</consoleOutput>
                    <configLocation>src/test/resources/checkstyle/checkstyle.xml</configLocation>
                    <suppressionsLocation>src/test/resources/checkstyle/suppressions.xml</suppressionsLocation>
                    <includeTestSourceDirectory>true</includeTestSourceDirectory>
                </configuration>
                <executions>
                    <execution>
                        <id>checkstyle-check</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>

    </build>


    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Niels Basjes</name>
            <email>niels@basjes.nl</email>
            <roles>
                <role>Architect</role>
                <role>Developer</role>
            </roles>
            <timezone>Europe/Amsterdam</timezone>
        </developer>
    </developers>

    <scm>
        <url>https://github.com/nielsbasjes/avro-schema-example</url>
        <connection>scm:git:https://github.com/nielsbasjes/avro-schema-example.git</connection>
        <developerConnection>scm:git:file:///${project.basedir}</developerConnection>
      <tag>v1.0.9</tag>
  </scm>

</project>
